{"version":3,"sources":["serviceWorker.js","index.js","components/App.js","components/Navbar.js","photo.png","components/Main.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","ipfs","require","ipfsClient","host","port","protocol","props","_this","Object","_Users_jashvavadiya_decentragram_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__","this","_Users_jashvavadiya_decentragram_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","_Users_jashvavadiya_decentragram_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","call","captureFile","event","preventDefault","file","target","files","reader","FileReader","readAsArrayBuffer","onloadend","setState","buffer","Buffer","result","console","log","state","uploadImage","description","add","error","loading","decentragram","methods","hash","send","from","account","on","images","bind","_Users_jashvavadiya_decentragram_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_8__","tipImageOwner","loadWeb3","loadBlockchainData","ethereum","web3","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","net","getId","networkId","networkData","Decentragram","networks","Contract","abi","address","imageCount","imagesCount","i","image","concat","_Users_jashvavadiya_decentragram_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","sort","b","tipAmount","id","_this2","tipImgOwner","value","react__WEBPACK_IMPORTED_MODULE_10___default","_Navbar__WEBPACK_IMPORTED_MODULE_12__","className","_Main__WEBPACK_IMPORTED_MODULE_13__","Component","Navbar","react__WEBPACK_IMPORTED_MODULE_5___default","style","color","rel","src","photo","width","height","alt","Identicon","toString","module","exports","__webpack_require__","p","Main","role","maxWidth","onSubmit","imageDescription","type","accept","onChange","ref","input","placeholder","required","map","key","author","imgHash","utils","fromWei","name","onClick","toWei"],"mappings":"0JAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOC,EAAAC,EAAAC,cAACC,EAAA,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,qv5FEzHbC,UADaC,EAAQ,IACdC,CAAW,CAAEC,KAAM,iBAAkBC,KAAM,KAAMC,SAAU,WAElEd,cA0FJ,SAAAA,EAAYe,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAnB,IACjBgB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAjB,GAAAsB,KAAAH,KAAMJ,KAvCRQ,YAAc,SAAAC,GAEZA,EAAMC,iBACN,IAAMC,EAAOF,EAAMG,OAAOC,MAAM,GAC1BC,EAAS,IAAItC,OAAOuC,WAC1BD,EAAOE,kBAAkBL,GAEzBG,EAAOG,UAAY,WACjBhB,EAAKiB,SAAS,CAAEC,OAAQC,EAAON,EAAOO,UACtCC,QAAQC,IAAI,SAAUtB,EAAKuB,MAAML,UA6BlBlB,EAzBnBwB,YAAc,SAAAC,GACZJ,QAAQC,IAAI,8BAGZ7B,EAAKiC,IAAI1B,EAAKuB,MAAML,OAAQ,SAACS,EAAOP,GAClCC,QAAQC,IAAI,cAAeF,GACxBO,EACDN,QAAQM,MAAMA,IAId3B,EAAKiB,SAAS,CAAEW,SAAS,IACzB5B,EAAKuB,MAAMM,aAAaC,QAAQN,YAAYJ,EAAO,GAAGW,KAAMN,GAAaO,KAAK,CAAEC,KAAMjC,EAAKuB,MAAMW,UAAWC,GAAG,kBAAmB,SAACJ,GACjI/B,EAAKiB,SAAS,CAAEW,SAAS,UAc/B5B,EAAKuB,MAAQ,CACXW,QAAS,GACTL,aAAc,KACdO,OAAQ,GACRR,SAAS,GAGX5B,EAAKwB,YAAcxB,EAAKwB,YAAYa,KAAjBpC,OAAAqC,EAAA,EAAArC,QAAAqC,EAAA,EAAArC,CAAAD,KACnBA,EAAKuC,cAAgBvC,EAAKuC,cAAcF,KAAnBpC,OAAAqC,EAAA,EAAArC,QAAAqC,EAAA,EAAArC,CAAAD,KACrBA,EAAKO,YAAcP,EAAKO,YAAY8B,KAAjBpC,OAAAqC,EAAA,EAAArC,QAAAqC,EAAA,EAAArC,CAAAD,KAXFA,4MAvFXG,KAAKqC,kCACLrC,KAAKsC,sQAIPlE,OAAOmE,gCACTnE,OAAOoE,KAAO,IAAIC,IAAKrE,OAAOmE,mBACxBnE,OAAOmE,SAASG,sCAEftE,OAAOoE,KACdpE,OAAOoE,KAAO,IAAIC,IAAKrE,OAAOoE,KAAKG,iBAGnCvE,OAAOwE,MAAM,oVAKTJ,EAAOpE,OAAOoE,cAEGA,EAAKK,IAAIC,4BAA1BC,SACN/C,KAAKc,SAAS,CAAEiB,QAASgB,EAAS,cAEVP,EAAKK,IAAIG,IAAIC,kBAA/BC,WACAC,EAAcC,EAAaC,SAASH,4BAElCxB,EAAe,IAAIc,EAAKK,IAAIS,SAASF,EAAaG,IAAKJ,EAAYK,SACzExD,KAAKc,SAAS,CAAEY,2BACUA,EAAaC,QAAQ8B,aAAatD,eAAtDuD,SACN1D,KAAKc,SAAS,CAAE4C,gBAGPC,EAAI,eAAGA,GAAKD,qCACChC,EAAaC,QAAQM,OAAO0B,GAAGxD,eAA7CyD,SACN1C,QAAQC,IAAIyC,GACZ5D,KAAKc,SAAS,CACZmB,OAAM,GAAA4B,OAAA/D,OAAAgE,EAAA,EAAAhE,CAAME,KAAKoB,MAAMa,QAAjB,CAAyB2B,cAJDD,4BAQlC3D,KAAKc,SAAS,CACZmB,OAAQjC,KAAKoB,MAAMa,OAAO8B,KAAK,SAACpF,EAAEqF,GAAH,OAASA,EAAEC,UAAYtF,EAAEsF,cAE1DjE,KAAKc,SAAS,CAAEW,SAAS,4BAEzBrD,OAAOwE,MAAM,oMAmCHsB,EAAID,GAAW,IAAAE,EAAAnE,KAC3BA,KAAKc,SAAS,CAAEW,SAAS,IACzBzB,KAAKoB,MAAMM,aAAaC,QAAQyC,YAAYF,GAAIrC,KAAK,CAAEC,KAAM9B,KAAKoB,MAAMW,QAASsC,MAAOJ,IAAajC,GAAG,kBAAmB,SAACJ,GAC1HuC,EAAKrD,SAAS,CAAEW,SAAS,wDAmB3B,OACE6C,EAAA3F,EAAAC,cAAA,WACE0F,EAAA3F,EAAAC,cAAC2F,EAAA,EAAD,CAAQxC,QAAS/B,KAAKoB,MAAMW,UAC1B/B,KAAKoB,MAAMK,QACT6C,EAAA3F,EAAAC,cAAA,OAAKsF,GAAG,SAASM,UAAU,oBAAmBF,EAAA3F,EAAAC,cAAA,wBAC9C0F,EAAA3F,EAAAC,cAAC6F,EAAA,EAAD,CACExC,OAAQjC,KAAKoB,MAAMa,OACnB7B,YAAaJ,KAAKI,YAClBiB,YAAarB,KAAKqB,YAClBe,cAAepC,KAAKoC,wBAlHhBsC,aA0HH7F,kKClIT8F,mLAGF,OACEC,EAAAjG,EAAAC,cAAA,OAAK4F,UAAU,kEACbI,EAAAjG,EAAAC,cAAA,KACE4F,UAAU,sCACVhE,OAAO,SACPqE,MAAO,CAACC,MAAM,SACdC,IAAI,uBAEJH,EAAAjG,EAAAC,cAAA,OAAKoG,IAAKC,IAAOC,MAAM,KAAKC,OAAO,KAAKX,UAAU,2BAA2BY,IAAI,KANnF,gBASAR,EAAAjG,EAAAC,cAAA,MAAI4F,UAAU,mBACZI,EAAAjG,EAAAC,cAAA,MAAI4F,UAAU,oDACZI,EAAAjG,EAAAC,cAAA,SAAO4F,UAAU,kBACfI,EAAAjG,EAAAC,cAAA,SAAOsF,GAAG,WAAWlE,KAAKJ,MAAMmC,UAEhC/B,KAAKJ,MAAMmC,QACT6C,EAAAjG,EAAAC,cAAA,OACA4F,UAAU,OACVU,MAAM,KACNC,OAAO,KACPH,IAAG,yBAAAnB,OAA2B,IAAIwB,IAAUrF,KAAKJ,MAAMmC,QAAS,IAAIuD,cAEpEV,EAAAjG,EAAAC,cAAA,uBA1BK8F,aAmCNC,2BCvCfY,EAAAC,QAAiBC,EAAAC,EAAuB,mJCGlCC,mLAEK,IAAA9F,EAAAG,KACP,OACE4E,EAAAjG,EAAAC,cAAA,OAAK4F,UAAU,wBACbI,EAAAjG,EAAAC,cAAA,OAAK4F,UAAU,OACbI,EAAAjG,EAAAC,cAAA,QAAMgH,KAAK,OAAOpB,UAAU,4BAA4BK,MAAO,CAAEgB,SAAU,UACzEjB,EAAAjG,EAAAC,cAAA,OAAK4F,UAAU,2BACbI,EAAAjG,EAAAC,cAAA,iBACAgG,EAAAjG,EAAAC,cAAA,yBACAgG,EAAAjG,EAAAC,cAAA,QAAMkH,SAAU,SAACzF,GACfA,EAAMC,iBACN,IAAMgB,EAAczB,EAAKkG,iBAAiB1B,MAC1CxE,EAAKD,MAAMyB,YAAYC,KAEvBsD,EAAAjG,EAAAC,cAAA,SAAOoH,KAAK,OAAOC,OAAO,gCAAgCC,SAAUlG,KAAKJ,MAAMQ,cAC7EwE,EAAAjG,EAAAC,cAAA,OAAK4F,UAAU,sBACbI,EAAAjG,EAAAC,cAAA,WACEgG,EAAAjG,EAAAC,cAAA,SACEsF,GAAG,mBACH8B,KAAK,OACLZ,IAAI,MACJe,IAAK,SAACC,GAAYvG,EAAKkG,iBAAmBK,GAC1C5B,UAAU,eACV6B,YAAY,uBACZC,UAAQ,KAEhB1B,EAAAjG,EAAAC,cAAA,UAAQoH,KAAK,SAASxB,UAAU,oCAAhC,YAGFI,EAAAjG,EAAAC,cAAA,iBAEEoB,KAAKJ,MAAMqC,OAAOsE,IAAI,SAAC3C,EAAO4C,GAC9B,OACE5B,EAAAjG,EAAAC,cAAA,OAAK4F,UAAU,YAAYgC,IAAKA,GAC9B5B,EAAAjG,EAAAC,cAAA,OAAK4F,UAAU,eACbI,EAAAjG,EAAAC,cAAA,OACEwG,IAAI,OACJZ,UAAU,OACVU,MAAM,KACNC,OAAO,KACPH,IAAG,yBAAAnB,OAA2B,IAAIwB,IAAUzB,EAAM6C,OAAQ,IAAInB,cAEhEV,EAAAjG,EAAAC,cAAA,SAAO4F,UAAU,cAAcZ,EAAM6C,SAEvC7B,EAAAjG,EAAAC,cAAA,MAAIsF,GAAG,YAAYM,UAAU,+BAC3BI,EAAAjG,EAAAC,cAAA,MAAI4F,UAAU,mBACZI,EAAAjG,EAAAC,cAAA,KAAG4F,UAAU,eAAcI,EAAAjG,EAAAC,cAAA,OAAKwG,IAAI,OAAOJ,IAAG,+BAAAnB,OAAiCD,EAAM8C,SAAW7B,MAAO,CAAEgB,SAAU,YACnHjB,EAAAjG,EAAAC,cAAA,SAAIgF,EAAMtC,cAEZsD,EAAAjG,EAAAC,cAAA,MAAI4H,IAAKA,EAAKhC,UAAU,wBACtBI,EAAAjG,EAAAC,cAAA,SAAO4F,UAAU,8BAAjB,SACSpG,OAAOoE,KAAKmE,MAAMC,QAAQhD,EAAMK,UAAUqB,WAAY,SAD/D,QAGAV,EAAAjG,EAAAC,cAAA,UACE4F,UAAU,uCACVqC,KAAMjD,EAAMM,GACZ4C,QAAS,SAACzG,GACR,IAAI4D,EAAY7F,OAAOoE,KAAKmE,MAAMI,MAAM,MAAO,SAC/C7F,QAAQC,IAAId,EAAMG,OAAOqG,KAAM5C,GAC/BpE,EAAKD,MAAMwC,cAAc/B,EAAMG,OAAOqG,KAAM5C,KANhD,+BAtDLS,aA8EJiB","file":"static/js/main.ed43faa5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import Decentragram from '../abis/Decentragram.json'\nimport React, { Component } from 'react';\nimport Identicon from 'identicon.js';\nimport Navbar from './Navbar'\nimport Main from './Main'\nimport Web3 from 'web3';\nimport './App.css';\n\n//Declare IPFS\nconst ipfsClient = require('ipfs-http-client')\nconst ipfs = ipfsClient({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' }) // leaving out the arguments will default to these values\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    this.setState({ account: accounts[0] })\n    // Network ID\n    const networkId = await web3.eth.net.getId()\n    const networkData = Decentragram.networks[networkId]\n    if(networkData) {\n      const decentragram = new web3.eth.Contract(Decentragram.abi, networkData.address)\n      this.setState({ decentragram })\n      const imagesCount = await decentragram.methods.imageCount().call()\n      this.setState({ imagesCount })\n\n      // Load images\n      for (var i = 1; i <= imagesCount; i++) {\n        const image = await decentragram.methods.images(i).call()\n        console.log(image)\n        this.setState({\n          images: [...this.state.images, image]\n        })\n      }\n      // Sort images. Show highest tipped images first\n      this.setState({\n        images: this.state.images.sort((a,b) => b.tipAmount - a.tipAmount )\n      })\n      this.setState({ loading: false})\n    } else {\n      window.alert('Decentragram contract not deployed to detected network.')\n    }\n  }\n\n  captureFile = event => {\n\n    event.preventDefault()\n    const file = event.target.files[0]\n    const reader = new window.FileReader()\n    reader.readAsArrayBuffer(file)\n\n    reader.onloadend = () => {\n      this.setState({ buffer: Buffer(reader.result) })\n      console.log('buffer', this.state.buffer)\n    }\n  }\n\n  uploadImage = description => {\n    console.log(\"Submitting file to ipfs...\")\n\n    //adding file to the IPFS\n    ipfs.add(this.state.buffer, (error, result) => {\n      console.log('Ipfs result', result)\n      if(error) {\n        console.error(error)\n        return\n      }\n\n        this.setState({ loading: true })\n        this.state.decentragram.methods.uploadImage(result[0].hash, description).send({ from: this.state.account }).on('transactionHash', (hash) => {\n          this.setState({ loading: false })\n      })\n    })\n  }\n\n  tipImageOwner(id, tipAmount) {\n    this.setState({ loading: true })\n    this.state.decentragram.methods.tipImgOwner(id).send({ from: this.state.account, value: tipAmount }).on('transactionHash', (hash) => {\n      this.setState({ loading: false })\n    })\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '',\n      decentragram: null,\n      images: [],\n      loading: true\n    }\n\n    this.uploadImage = this.uploadImage.bind(this)\n    this.tipImageOwner = this.tipImageOwner.bind(this)\n    this.captureFile = this.captureFile.bind(this)\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar account={this.state.account} />\n        { this.state.loading\n          ? <div id=\"loader\" className=\"text-center mt-5\"><p>Loading...</p></div>\n          : <Main\n              images={this.state.images}\n              captureFile={this.captureFile}\n              uploadImage={this.uploadImage}\n              tipImageOwner={this.tipImageOwner}\n            />\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;","import React, { Component } from 'react';\nimport Identicon from 'identicon.js';\nimport photo from '../photo.png'\n\nclass Navbar extends Component {\n\n  render() {\n    return (\n      <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n        <a\n          className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n          target=\"_blank\"\n          style={{color:\"white\"}}\n          rel=\"noopener noreferrer\"\n        >\n          <img src={photo} width=\"30\" height=\"30\" className=\"d-inline-block align-top\" alt=\"\"/>\n          Decentragram\n        </a>\n        <ul className=\"navbar-nav px-3\">\n          <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\n            <small className=\"text-secondary\">\n              <small id=\"account\">{this.props.account}</small>\n            </small>\n            { this.props.account\n              ? <img\n                className='ml-2'\n                width='30'\n                height='30'\n                src={`data:image/png;base64,${new Identicon(this.props.account, 30).toString()}`}\n              />\n              : <span></span>\n            }\n          </li>\n        </ul>\n      </nav>\n    );\n  }\n}\n\nexport default Navbar;","module.exports = __webpack_public_path__ + \"static/media/photo.d6cbd8e6.png\";","import React, { Component } from 'react';\nimport Identicon from 'identicon.js';\n\nclass Main extends Component {\n\n  render() {\n    return (\n      <div className=\"container-fluid mt-5\">\n        <div className=\"row\">\n          <main role=\"main\" className=\"col-lg-12 ml-auto mr-auto\" style={{ maxWidth: '500px' }}>\n            <div className=\"content mr-auto ml-auto\">\n              <p>&nbsp;</p>\n              <h2>Share Image</h2>\n              <form onSubmit={(event) => {\n                event.preventDefault()\n                const description = this.imageDescription.value\n                this.props.uploadImage(description)\n              }} >\n                <input type='file' accept=\".jpg, .jpeg, .png, .bmp, .gif\" onChange={this.props.captureFile} />\n                  <div className=\"form-group mr-sm-2\">\n                    <br></br>\n                      <input\n                        id=\"imageDescription\"\n                        type=\"text\"\n                        alt='des'\n                        ref={(input) => { this.imageDescription = input }}\n                        className=\"form-control\"\n                        placeholder=\"Image description...\"\n                        required />\n                  </div>\n                <button type=\"submit\" className=\"btn btn-primary btn-block btn-lg\">Upload!</button>\n              </form>\n\n              <p>&nbsp;</p>\n\n              { this.props.images.map((image, key) => {\n                return(\n                  <div className=\"card mb-4\" key={key} >\n                    <div className=\"card-header\">\n                      <img\n                        alt='icon'\n                        className='mr-2'\n                        width='30'\n                        height='30'\n                        src={`data:image/png;base64,${new Identicon(image.author, 30).toString()}`}\n                      />\n                      <small className=\"text-muted\">{image.author}</small>\n                    </div>\n                    <ul id=\"imageList\" className=\"list-group list-group-flush\">\n                      <li className=\"list-group-item\">\n                        <p className=\"text-center\"><img alt='post' src={`https://ipfs.infura.io/ipfs/${image.imgHash}`} style={{ maxWidth: '420px'}}/></p>\n                        <p>{image.description}</p>\n                      </li>\n                      <li key={key} className=\"list-group-item py-2\">\n                        <small className=\"float-left mt-1 text-muted\">\n                          TIPS: {window.web3.utils.fromWei(image.tipAmount.toString(), 'Ether')} ETH\n                        </small>\n                        <button\n                          className=\"btn btn-link btn-sm float-right pt-0\"\n                          name={image.id}\n                          onClick={(event) => {\n                            let tipAmount = window.web3.utils.toWei('0.1', 'Ether')\n                            console.log(event.target.name, tipAmount)\n                            this.props.tipImageOwner(event.target.name, tipAmount)\n                          }}\n                        >\n                          TIP 0.1 ETH\n                        </button>\n                      </li>\n                    </ul>\n                  </div>\n                )\n              })}\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Main;"],"sourceRoot":""}